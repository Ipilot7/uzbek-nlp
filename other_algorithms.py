import pandas as pd
import re
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from gensim.models import FastText
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Bidirectional, LSTM, Embedding, Dropout
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from transformers import BertTokenizer, TFBertForSequenceClassification
import tensorflow as tf

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
train_df = pd.read_csv("data/raw/train.csv")
val_df = pd.read_csv("data/raw/validation.csv")

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def preprocess(text):
    text = str(text).lower()
    text = re.sub(r"[^\w\s º ª‚Äô]", " ", text)
    text = re.sub(r"[ º ª‚Äô]", "'", text)
    return text

train_df["text_processed"] = train_df["uzbek_text"].apply(preprocess)
val_df["text_processed"] = val_df["uzbek_text"].apply(preprocess)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, y_train = train_df["text_processed"], train_df["label"]
X_val, y_val = val_df["text_processed"], val_df["label"]

# ==============================================
# –ú–æ–¥–µ–ª—å 2: FastText + –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
# ==============================================

print("\nüîß Training FastText + Logistic Regression...")

# –û–±—É—á–µ–Ω–∏–µ FastText –Ω–∞ –Ω–∞—à–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö
sentences = [text.split() for text in X_train]
ft_model = FastText(vector_size=100, window=5, min_count=2, workers=4)
ft_model.build_vocab(sentences)
ft_model.train(sentences, total_examples=len(sentences), epochs=10)

# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤
def text_to_vector(text):
    words = text.split()
    word_vecs = [ft_model.wv[word] for word in words if word in ft_model.wv]
    if len(word_vecs) == 0:
        return np.zeros(100)
    return np.mean(word_vecs, axis=0)

X_train_ft = np.array([text_to_vector(text) for text in X_train])
X_val_ft = np.array([text_to_vector(text) for text in X_val])

# –û–±—É—á–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train_ft, y_train)

# –û—Ü–µ–Ω–∫–∞
y_pred = lr_model.predict(X_val_ft)
print("\nüìä FastText + Logistic Regression Report:")
print(classification_report(y_val, y_pred))

# ==============================================
# –ú–æ–¥–µ–ª—å 3: BiLSTM + GloVe
# ==============================================

print("\nüîß Training BiLSTM + GloVe...")

# –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤
tokenizer = Tokenizer(num_words=10000)
tokenizer.fit_on_texts(X_train)

X_train_seq = tokenizer.texts_to_sequences(X_train)
X_val_seq = tokenizer.texts_to_sequences(X_val)

# –ü–∞–¥–¥–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
max_len = 100
X_train_pad = pad_sequences(X_train_seq, maxlen=max_len)
X_val_pad = pad_sequences(X_val_seq, maxlen=max_len)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö GloVe –≤–µ–∫—Ç–æ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ, –Ω—É–∂–µ–Ω —É–∑–±–µ–∫—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∑–±–µ–∫—Å–∫–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
embedding_dim = 100
embedding_matrix = np.random.rand(10000, embedding_dim)  # –ó–∞–≥–ª—É—à–∫–∞

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ BiLSTM
model = Sequential()
model.add(Embedding(input_dim=10000, 
                   output_dim=embedding_dim, 
                   input_length=max_len,
                   weights=[embedding_matrix],
                   trainable=False))
model.add(Bidirectional(LSTM(64)))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# –û–±—É—á–µ–Ω–∏–µ
model.fit(X_train_pad, y_train,
          validation_data=(X_val_pad, y_val),
          epochs=5,
          batch_size=32)

# –û—Ü–µ–Ω–∫–∞
y_pred = (model.predict(X_val_pad) > 0.5).astype("int32")
print("\nüìä BiLSTM + GloVe Report:")
print(classification_report(y_val, y_pred))

# ==============================================
# –ú–æ–¥–µ–ª—å 4: mBERT (–±–µ–∑ –¥–æ–æ–±—É—á–µ–Ω–∏—è)
# ==============================================

print("\nüîß Evaluating mBERT...")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
tokenizer = BertTokenizer.from_pretrained('bert-base-multilingual-cased')
model = TFBertForSequenceClassification.from_pretrained('bert-base-multilingual-cased')

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BERT
def convert_examples_to_tfdataset(texts, labels):
    inputs = tokenizer(texts.tolist(), 
                      padding=True, 
                      truncation=True, 
                      max_length=128, 
                      return_tensors="tf")
    return tf.data.Dataset.from_tensor_slices((
        dict(inputs),
        labels
    )).batch(16)

train_data = convert_examples_to_tfdataset(X_train, y_train)
val_data = convert_examples_to_tfdataset(X_val, y_val)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=3e-5),
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# –û—Ü–µ–Ω–∫–∞ (–±–µ–∑ –¥–æ–æ–±—É—á–µ–Ω–∏—è)
loss, accuracy = model.evaluate(val_data)
print(f"\nüìä mBERT Accuracy: {accuracy:.4f}")

# –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –¥–æ–æ–±—É—á–µ–Ω–∏–µ:
# model.fit(train_data, epochs=2, validation_data=val_data)